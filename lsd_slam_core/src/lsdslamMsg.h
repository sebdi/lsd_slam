/* Auto-generated by genmsg_cpp for file /home/sebastian/Git/vl_slam_ws/vl_slam_dir/vl_slam/vl_slam_core/msg/lsdslamMsg.msg */
#ifndef VL_SLAM_CORE_MESSAGE_LSDSLAMMSG_H
#define VL_SLAM_CORE_MESSAGE_LSDSLAMMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/Image.h"
#include "nav_msgs/Odometry.h"

namespace vl_slam_core
{
template <class ContainerAllocator>
struct lsdslamMsg_ {
  typedef lsdslamMsg_<ContainerAllocator> Type;

  lsdslamMsg_()
  : image()
  , pose()
  , depth()
  {
  }

  lsdslamMsg_(const ContainerAllocator& _alloc)
  : image(_alloc)
  , pose(_alloc)
  , depth(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  image;

  typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _pose_type;
   ::nav_msgs::Odometry_<ContainerAllocator>  pose;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _depth_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  depth;


  typedef boost::shared_ptr< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vl_slam_core::lsdslamMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct lsdslamMsg
typedef  ::vl_slam_core::lsdslamMsg_<std::allocator<void> > lsdslamMsg;

typedef boost::shared_ptr< ::vl_slam_core::lsdslamMsg> lsdslamMsgPtr;
typedef boost::shared_ptr< ::vl_slam_core::lsdslamMsg const> lsdslamMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::vl_slam_core::lsdslamMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace vl_slam_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::vl_slam_core::lsdslamMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7ddfa4518e182e1b63ab6119a77bdc34";
  }

  static const char* value(const  ::vl_slam_core::lsdslamMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7ddfa4518e182e1bULL;
  static const uint64_t static_value2 = 0x63ab6119a77bdc34ULL;
};

template<class ContainerAllocator>
struct DataType< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "vl_slam_core/lsdslamMsg";
  }

  static const char* value(const  ::vl_slam_core::lsdslamMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image image\n\
nav_msgs/Odometry pose\n\
\n\
# may be empty, in that case no associated pointcloud is ever shown.\n\
float32[] depth\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::vl_slam_core::lsdslamMsg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.image);
    stream.next(m.pose);
    stream.next(m.depth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct lsdslamMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vl_slam_core::lsdslamMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::vl_slam_core::lsdslamMsg_<ContainerAllocator> & v) 
  {
    s << indent << "image: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "depth[]" << std::endl;
    for (size_t i = 0; i < v.depth.size(); ++i)
    {
      s << indent << "  depth[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.depth[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // VL_SLAM_CORE_MESSAGE_LSDSLAMMSG_H

